import { writeFileSync, mkdirSync } from "fs";
import {
  quicktype,
  InputData,
  jsonInputForTargetLanguage,
} from "quicktype-core";
import path from "path";
import { EndpointConfig } from "./types";
import { API_ENDPOINTS } from "./config";

async function quicktypeJSON(data: unknown, rootName: string): Promise<string> {
  const jsonInput = jsonInputForTargetLanguage("typescript");
  await jsonInput.addSource({
    name: rootName,
    samples: [JSON.stringify(data)],
  });

  const inputData = new InputData();
  inputData.addInput(jsonInput);

  const { lines } = await quicktype({
    inputData,
    lang: "typescript",
    rendererOptions: {
      "just-types": "true",
      "runtime-typecheck": "false",
    },
    inferMaps: true,
    inferEnums: true,
    alphabetizeProperties: true,
    allPropertiesOptional: true,
  });

  return lines.join("\n");
}

async function generateTypesForEndpoint(config: EndpointConfig): Promise<void> {
  const { url, outputPath, rootName, headers = {} } = config;

  try {
    const response = await fetch(url, { headers });
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    const data = await response.json();

    const types = await quicktypeJSON(data, rootName);

    const dirPath = path.dirname(outputPath);
    mkdirSync(dirPath, { recursive: true });

    const output = [
      "// Generated by generate-types.ts",
      `// Generated at ${new Date().toISOString()}`,
      `// Source: ${url}`,
      "",
      types,
      "",
    ].join("\n");

    writeFileSync(outputPath, output);
    console.log(`✅ Types generated for ${rootName} at ${outputPath}`);
  } catch (error) {
    console.error(`❌ Error generating types for ${url}:`, error);
    throw error;
  }
}

function chunk<T>(array: T[], size: number): T[][] {
  return Array.from({ length: Math.ceil(array.length / size) }, (_, index) =>
    array.slice(index * size, index * size + size)
  );
}

async function generateAllTypes(chunkSize = 3): Promise<void> {
  try {
    const chunks = chunk(API_ENDPOINTS, chunkSize);

    for (const [index, currentChunk] of chunks.entries()) {
      console.log(`Processing chunk ${index + 1}/${chunks.length}...`);

      await Promise.all(
        currentChunk.map((endpoint) => generateTypesForEndpoint(endpoint))
      );
    }

    console.log("✅ All types generated successfully!");
  } catch (error) {
    console.error("❌ Error generating types:", error);
    process.exit(1);
  }
}

generateAllTypes(3);
